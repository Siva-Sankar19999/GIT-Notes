->Git Uder the hood          https://stashchuk.com/static/git/4-how-git-works-under-the-hood.pdf

GIT OBJECT TYPES:
  ->Git has four types of objects 1. Blob 2.Tree 3.commit 4.Annotated Tag
    ->Blob :with the help of Blob object type, git store(manage) files of any type in blobs
    ->Tree :with the help of Tree object type, git stores(manage) information about directories 
    ->commit :with the help of commit object type,git stores different versions of project
    ->Annotated tag:It contains persistent pointer that points to commit
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GIT LOW LEVEL COMMANDS

->git hash-object : with the help of this command we can create new blob objects and write to it(using -w)
->git cat-file : with the help of this command we can read git object
->git mktree : with the help of this command we can create new tree object

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->Git cat file options

git cat-file -p <hash>  ---contents of the object
git cat-file -s <hash>  ---size of the object
git cat-file -t <hash>  ---type of the object

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create file object using git hash-object

->git hash-object <filename> -w
* NOT REQUIRED BELOW
->Where git object store its file type and size information?
  It stores in git object itself.
  git blob object structure : type sizeDelimiter content of file <---> blob 26(Bytes)\0 'some random text' 
             eg: echo -e 'blob 26\0some random text' | shasum gives same sha1 hash code where we can produce using this way of creating
                  file objects  eg: git hash-object <file name> -w 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SUMMARY ABOUT GIT BLOB AND GIT TREE

->Git blob doesnot store file names.
->Git Tree contains file name thats why we dont need to store names in git blobs.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GIT TREE OBJECT

->How can we create a tree object?
  First create a temporary file that contain previous blobs information 
     temp.txt
             100644 blob <hash code> filename
             100644 blob <hash code> filename2
     gave this temp.txt to git tree object like below
             
           * cat temp.txt | git mktree
           
           Now above tree object contains pointers to already existing blob objects(files) and we have to given name to them also. 
     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->List files in staging area
  git ls-files -s
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->Bring files from .git to staging area
  git read-tree <hash>    eg: hash code tree object
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->Bring files from staging area to working directory
  git checkout-index -a (a for all files in staging area to working directory)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->GIT BASICS (NEXT SECTION)
  ->To see the configurations of git
    git config --list
  ->Every file in git will be in four stages 
    1.Untracked 2.Modified 3.Unmodified 4.Staged
    There is no tracked state.But we can say file is tracked by git if it is in modified,staged or unmodified.
    When we add(create) new files to working directory it will be in untracked state.
* ->What to do when we add a file that is not required or incorrect?
    We have to make the file untracked.
* If we make any modifications in unmodified file it will again come into modified state -> then we have to make the file to staged state and after change to
  unmodified state
->Git status command tells the file in which state and it is most used command.
      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->Git add command : We can make the file untracked state to staged state and modified state to staged state.
->Git commit : we can make the file staged state to unmodified state.
->git rm --cached fileName : We can make file from staged state to untracked state directly.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
->GIT BRANCHES
  ->Branch is like a reference(pointer) to last commit 
  Q)How can git identify what is the current branch?
  a) Head is a pointer that points to current branch
  ->There is a file named HEAD in .git folder it contains information of current branch that head points to.
  ->Actually head pointer to current branch and that branch points to last commit.
  ->If we make the head points to some commit(sha1 hash code) instead of branch . we will be in Detached head state.
  Q)what is Detached head state?
  a) ??????
  
  ->BRANCH COMMANDS
    ->git branch ->Lists all the branches
    ->git branch <branch-name>  ->Create a branch
    ->git checkout <branch-name> ->Checkout to different branch
    ->git branch -d <branch-name> ->Delete a branch that is merged
    ->git branch -D <branch-name>  ->Delete a branch that is non-merged
    ->git branch -m <old-name> <new-name> ->Renaming a branch
    ->git checkout -b <branch-name>  ->create a branch and checkout to that branch
    
  ->.git/refs/heads contains all the branches(pointers).
  ->.git/Head contains the information about the current branch.
    
    
  
  
  
    
  
    
    
















